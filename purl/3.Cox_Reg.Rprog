## ----setup, include=FALSE-------------------------------------------
knitr::opts_chunk$set(echo = TRUE, comment="#>")


## ---- data, echo=FALSE, message=FALSE, warning=FALSE----------------
if (!require('pacman')) install.packages('pacman', repos = "http://cran.us.r-project.org")
library(pacman)

pacman::p_load(
  readxl,       # load excel file
  glmnet,       # Lasso and Elastic-Net Regularized Generalized Linear Models
  rmdformats,   # rmd formats
  rmarkdown,    # rmarkdown
  here,         # File locator
  skimr,        # get overview of data
  tidyverse,    # data management + ggplot2 graphics 
  janitor,      # adding totals and percents to tables
  flextable,    # format the output table
  gtsummary,    # calculate summary statistics and format the results
  sjPlot,       # correlation matrix
  purrr,        # enhances R functional programming (FP) toolki 
  tidyr,        #Tools to help to create tidy data
  ggplot2,      #Plot the results
  glmnetUtils,  #Glmnet models for multiple alpha
  coefplot,     # Plotting Model Coefficients
  survival,     #survival model 
  tidymodels,   #for modeling and machine learning using tidyverse principles
  survivalROC   #survivalROC
  )

## ----utilsag--------------------------------------------------------
if (!require('utilsag')) devtools::install_github("agalecki/utilsag") #, ref = "version-0.1.1")
library(utilsag)


## ---- prepare-data, echo=TRUE, message=FALSE, warning=FALSE---------
#read the data that is stored under the data folder

scrambled <- readRDS(file = "./Data/scrambled.rds")

scrambled <- scrambled  %>% mutate(log10_DU_ACR = log10(DU_ACR))  %>% filter(time>0)

dim(scrambled) # Number of rows and columns in the input data

# variables used in Cox regression model
prot_npx <- c("KIM1.npx","SYND1.npx","IL.1RT1.npx",   "WFDC2.npx", "CD27.npx",
              "TNFRSF10A.npx","LAYN.npx","PVRL4.npx", "EDA2R.npx","TNFRSF4.npx",
              "GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", "EFNA4.npx","TNF.R2.npx" ,
              "DLL1.npx", "TNFRSF6B.npx", "CD160.npx", "EPHA2.npx","RELT.npx",
              "LTBR.npx") 
surv_vars <-  c("time", "status")
clin_vars <- c("BL_eGFR","B_HBA1C_PRC","log10_DU_ACR","SEX","AGE_TL")


## ----create-data-drop-na0-------------------------------------------
vars0 <- c(surv_vars, clin_vars)
 
data0 <- scrambled  %>% select(all_of(vars0)) 

#drop any records with NA
data_drop_na0 <- data0 %>% drop_na()    

# Total sample size and number of columns
dim(data_drop_na0)

#includes all proteins after excluding missing data
x0 <- data.matrix(data_drop_na0[, clin_vars])
dim(x0)
colnames(x0)  # 5 clinical predictors

# time and status
tx <- data.matrix(data_drop_na0[,c("time","status")])
ty    <- tx[, "time"]
stx <- tx[,"status"]
ySurv0 <- survival::Surv(ty, stx)   
table(data_drop_na0$status) # 0-censored, 1-observed time-to-ESKD


## ----Unadjusted-M0, echo = TRUE, message= FALSE, warning=FALSE------
#fit the unadjusted cox regression model
pfit0 <- glmnet(x0, ySurv0, family = "cox", alpha=0)
class(pfit0)


## ---- coefficient-profile-plot0, echo=TRUE, message=FALSE-----------
plot(pfit0, label = TRUE) 


## ---- Unadjusted_cv_plot0, echo=TRUE, message=FALSE-----------------
set.seed(1)
#fit the cross-validated model
cvfit0 <- cv.glmnet(x0, ySurv0, family = "cox", alpha=0)
plot(cvfit0, label = TRUE) 


## ---- Unadjusted-M0-cv_min, echo=TRUE, message=FALSE, warning=FALSE----
cvfit0$lambda.min
coef(cvfit0, s = "lambda.min")


## ---- Unadjusted-M0-cv-lse, echo=TRUE, message=FALSE, warning=FALSE----
cvfit0$lambda.1se
coef(cvfit0)  # By default s = "lambda.min"


## ----glmnetUtils-M0-------------------------------------------------

set.seed(46)
alphv <- seq(0, 1, len = 11)^3
cva_pfit0 <- cva.glmnet(x=x0,y=ySurv0,family = "cox", alpha = alphv)
minlossplot(cva_pfit0)


## ----get_best_params-M0---------------------------------------------
# Extract the best parameters from cva.glmnet object.
get_model_params <- function(fit) {
  alpha <- fit$alpha
  lambdaMin <- sapply(fit$modlist, `[[`, "lambda.min")
  lambdaSE <- sapply(fit$modlist, `[[`, "lambda.1se")
  error <- sapply(fit$modlist, function(mod) {min(mod$cvm)})
  best <- which.min(error)
  data.frame(alpha = alpha[best], lambdaMin = lambdaMin[best],
             lambdaSE = lambdaSE[best], eror = error[best])
}

get_model_params(cva_pfit0)
a0_opt <- get_model_params(cva_pfit0)[["alpha"]]
lmbda0_opt <- get_model_params(cva_pfit0)[["lambdaMin"]]


## ----get_best_coef-M0-----------------------------------------------
coef(cva_pfit0, s = lmbda0_opt, alpha = a0_opt)


## ----save-cva_pfit0-------------------------------------------------
save(cva_pfit0, file = "./save/21Cox-Reg1-save0.Rdata")


## ----create-data-drop-na1-------------------------------------------
vars1 <- c(surv_vars, prot_npx)
 
data1 <- scrambled  %>% select(all_of(vars1)) 

#drop any records with NA
data_drop_na1 <- data1 %>% drop_na()    

# Total sample size and number of columns
dim(data_drop_na1)

#includes all proteins after excluding missing data
x1 <- data.matrix(data_drop_na1[, prot_npx])
dim(x1)
colnames(x1)  # 21 proteins

# time and status
tx <- data.matrix(data_drop_na1[,c("time","status")])
ty    <- tx[, "time"]
stx <- tx[,"status"]
ySurv1 <- survival::Surv(ty, stx)   
table(data_drop_na1$status) # 0-censored, 1-observed time-to-ESKD


## ----Unadjusted, echo =TRUE, message=FALSE, warning=FALSE-----------
#fit the unadjusted cox regression model
pfit1 <- glmnet(x1, ySurv1, family = "cox", alpha=0)
class(pfit1)


## ---- coefficient-profile-plot1, echo=TRUE, message=FALSE-----------
plot(pfit1, label = TRUE) 


## ---- coefficient-profile-plot12, echo=TRUE, message=FALSE, warning=FALSE----
coefpath(pfit1) 


## ---- Unadjusted_cv_plot, echo=TRUE, message=FALSE------------------
set.seed(111)
#fit the cross-validated model
cvfit1 <- cv.glmnet(x1, ySurv1, family = "cox", alpha=0)
plot(cvfit1, label = TRUE) 


## ---- Unadjusted_cv_min, echo=TRUE, message=FALSE, warning=FALSE----
cvfit1$lambda.min
coef(cvfit1, s = "lambda.min")


## ---- Unadjusted_cv_lse, echo=TRUE, message=FALSE, warning=FALSE----
cvfit1$lambda.1se
coef(cvfit1)  # By default s = "lambda.min"


## ----glmnetUtils----------------------------------------------------

set.seed(46)
alphv <- seq(0, 1, len = 11)^3
cva_pfit1 <- cva.glmnet(x=x1,y=ySurv1,family = "cox", alpha = alphv)
minlossplot(cva_pfit1)


## ----get_best_params------------------------------------------------
# Extract the best parameters from cva.glmnet object.
get_model_params <- function(fit) {
  alpha <- fit$alpha
  lambdaMin <- sapply(fit$modlist, `[[`, "lambda.min")
  lambdaSE <- sapply(fit$modlist, `[[`, "lambda.1se")
  error <- sapply(fit$modlist, function(mod) {min(mod$cvm)})
  best <- which.min(error)
  data.frame(alpha = alpha[best], lambdaMin = lambdaMin[best],
             lambdaSE = lambdaSE[best], eror = error[best])
}

get_model_params(cva_pfit1)
a1_opt <- get_model_params(cva_pfit1)[["alpha"]]
lmbda1_opt <- get_model_params(cva_pfit1)[["lambdaMin"]]


## ----get_best_coef--------------------------------------------------
coef(cva_pfit1, s = lmbda1_opt, alpha = a1_opt)


## ----save-cva_pfit1-------------------------------------------------
save(cva_pfit1, file = "./save/21Cox-Reg1-save1.Rdata")


## ---- Adjusted, echo=TRUE, message=FALSE, warning=FALSE-------------

vars2 <- c(surv_vars,  prot_npx, clin_vars)
 
data2 <- scrambled  %>% select(all_of(vars2)) 

#drop any records with NA
dim(data2)         

#drop any records with NA
data_drop_na2 <- data2 %>% drop_na()    

#Total sample size
nrow(data_drop_na2)

#includes all proteins after excluding missing data
x2 <- data.matrix(data_drop_na2[,c(prot_npx, clin_vars)])

#select follow-up time and status
y2 <- data.matrix(data_drop_na2[,c("time","status")])
y2Surv <- survival::Surv(y2[,"time"], y2[,"status"])


## ----glmnet-pfit2, echo=TRUE, message=FALSE, warning=FALSE----------
#fit the adjusted cox regression model
pfit2 <- glmnet(x2, y2Surv, family = "cox", alpha=0)



## ---- Adjusted_plot, echo=TRUE, message=FALSE, warning=FALSE--------
plot(pfit2, label = TRUE) 


## ---- Adjusted_cv_plot, echo=TRUE, message=FALSE, warning=FALSE-----
set.seed(222)
#fit the cross-validatedmodel
cvfit2 <- cv.glmnet(x2, y2Surv, family = "cox", alpha=0)

plot(cvfit2, label = TRUE) 


## ---- Adjusted_cv_min, echo=TRUE, message=FALSE, warning=FALSE------
#get the minimal lambda value (value of lambda that gives minimum cvm)
(l_min <- cvfit2$lambda.min)

# Express on natural log scale
log(l_min)
# Cross-validated Cox Regression Model using the minimal lambda
coef(cvfit2, s = "lambda.min")


## ---- Adjusted_cv_lse, echo=TRUE, message=FALSE, warning=FALSE------
(l_1se <- cvfit2$lambda.1se)

# Express on natural log scale
log(l_1se)

coef(cvfit2)


## ----glmnetUtils_M2-------------------------------------------------

set.seed(46)
alphv <- seq(0, 1, len = 11)^3
cva_pfit2 <- cva.glmnet(x=x2,y=y2Surv,family = "cox", alpha = alphv)
minlossplot(cva_pfit2)


## ----get_best_params_M2---------------------------------------------

(pfit2_params <- get_model_params(cva_pfit2))

a2_opt <- pfit2_params[["alpha"]]
lmbda2_opt <- pfit2_params[["lambdaMin"]]


## ----get_best_coef_M2-----------------------------------------------

coef(cva_pfit2, s = lmbda2_opt, alpha = a2_opt)


## ----pfit2_a-object-------------------------------------------------
pfit2_aopt <- glmnet(x2, y2Surv, family = "cox", alpha= a2_opt)


## ----surv2-plot-----------------------------------------------------
# survfit object for penalized Cox model
sf0 <- survival::survfit(pfit2_aopt, s = lmbda2_opt, x = x2, y = y2Surv)
plot(sf0)


## ----surv-plot-mean-------------------------------------------------
x2mean <- apply(x2, 2, mean)
sfm <- survival::survfit(pfit2_aopt, s = lmbda2_opt, x = x2, y = y2Surv, newx = x2mean)
# plot(sfm)


## ----Prepare-test-data-M2-------------------------------------------
dim(data_drop_na2)
test_rows <- 1:nrow(x2)    # Select rows for testing. Possibly all rows in data_drop_na2.
x2_test <- x2[test_rows,]
y2_test <- y2[test_rows,]
y2Surv_test <- survival::Surv(y2_test[,"time"], y2_test[,"status"] )

data2_test <- data_drop_na2[test_rows, ]
range(data2_test$time)


## ----calc-pred2-vals------------------------------------------------
predM2_lpmtx <- predict(pfit2_aopt, newx = x2_test, type = "link") # Matrix
predM2_lp <- as.vector(predict(pfit2_aopt, newx = x2_test, type = "link", s = lmbda2_opt))
summary(predM2_lp)


## ----C-index-M2-----------------------------------------------------
apply(predM2_lpmtx, 2, Cindex, y = y2Surv_test) # Multiple lambda
Cindex(predM2_lp, y2Surv_test)                  # For optimal lambda


## ----surv-roc-------------------------------------------------------
dataM2_test <- data2_test
                
## Augment `dataM2_test` with linear predictor
 dataM2_test$predM2_lp <- predM2_lp

# Evaluate every 2.5 years
 
tx <- 2.5* c(2,3,4,5,6) # ROC time points

survROC_lp2 <- create_survivalROC_data(tx, dataM2_test, predM2_lp)
 
# survROC_lp2 %>% print (n=100)


## ----surv-roc-plot--------------------------------------------------
## Plot Time-dependent ROC every 2.5 years
plot_timedep_ROC(survROC_lp2) 


## ----save-cva_pfit2_M2----------------------------------------------
save(cva_pfit2, file = "./save/21Cox-Reg1-save2.Rdata")


## ----tidy-libs------------------------------------------------------
library(survival)
library(censored)
library(dplyr)
library(tidyr)


## ----tidy-M0-all----------------------------------------------------
# M0 for all alpha
mod0_all <- map(alphv, function(a){
  proportional_hazards(penalty = tune(), mixture = a) %>% 
  set_engine("glmnet") %>% 
  fit(Surv(time, status) ~ ., data = data_drop_na0)
})
length(mod0_all)
tmp <- mod0_all[[2]]
class(tmp)



## ----tidy-M0-opt----------------------------------------------------
mod0_opt <- 
  proportional_hazards(penalty = lmbda0_opt, mixture = a0_opt) %>% 
  set_engine("glmnet") %>% 
  fit(Surv(time, status) ~ ., data = data_drop_na0)
class(mod0_opt)


## ----tidy-M1-all----------------------------------------------------
# M1 for all alpha
mod1_all <- map(alphv, function(a){
  proportional_hazards(penalty = tune(), mixture = a) %>% 
  set_engine("glmnet") %>% 
  fit(Surv(time, status) ~ ., data = data_drop_na1)
})
length(mod1_all)
tmp <- mod1_all[[2]]
class(tmp)



## ----tidy-M1-opt----------------------------------------------------
mod1_opt <- 
  proportional_hazards(penalty = lmbda1_opt, mixture = a1_opt) %>% 
  set_engine("glmnet") %>% 
  fit(Surv(time, status) ~ ., data = data_drop_na1)
class(mod1_opt)


## ----tidy-M2-all----------------------------------------------------
# M2 for all alpha
mod2_all <- map(alphv, function(a){
  proportional_hazards(penalty = tune(), mixture = a) %>% 
  set_engine("glmnet") %>% 
  fit(Surv(time, status) ~ ., data = data_drop_na2)
})
length(mod2_all)
tmp <- mod2_all[[2]]
class(tmp)


## ----tidy-M2-opt----------------------------------------------------
mod2_opt <- 
  proportional_hazards(penalty = lmbda2_opt, mixture = a2_opt) %>% 
  set_engine("glmnet") %>% 
  fit(Surv(time, status) ~ ., data = data_drop_na2)
class(mod2_opt)


## ----tidy-survprob-M2-----------------------------------------------
# Predicted survival probabilities for different subjects
predM2_survprob <- predict(mod2_opt, data2_test, type = "survival", time = c(5,10)) %>%
   rename(predM2_survprob = .pred)
predM2_survprob %>% print(n=5)

predM2_survprob_u <- predM2_survprob %>% 
  bind_cols(data2_test) %>% 
  unnest(predM2_survprob)
colnames(predM2_survprob_u)


## ----tidy-survtime-M2-----------------------------------------------

predM2_time <- predict(mod2_opt, data2_test, type = "time") %>% 
        rename(predM2_time = .pred_time) %>% as_tibble()
 
predM2_time %>% print(n=30)
# plot(log(pred_M2tidy$predM2_time), log(pred_M2tidy$time))


## ----Cindex-tidy-survM2---------------------------------------------

predM2_lp <- predict(mod2_opt, data2_test, type = "linear_pred", increasing = FALSE) %>% 
               rename(predM2_lp = .pred_linear_pred)
               
               


## ----cbind-predM2---------------------------------------------------
M2_pred <- cbind(data2_test, predM2_survprob, predM2_time, predM2_lp ) 

# %>% select(.pred_time, time, status) %>%

summ_M2 <- M2_pred %>%
                summarize(CindexM2 = Cindex(predM2_time, Surv(time, status)))
summ_M2$CindexM2  



## ----ROC-surv-plot-m2tidy-------------------------------------------
tx <- 2.5* c(2,3,4,5,6)    # ROC time points 
survROC_dataM2 <- create_survivalROC_data(tx, M2_pred, predM2_lp)

## Plot Time-dependent ROC every 2.5 years
plot_timedep_ROC(survROC_dataM2) 



## ----save-tidy------------------------------------------------------
save(mod0_all, mod0_opt, mod1_all, mod1_opt, mod2_opt, mod2_all, file ="./save/3Coxreg1-tidy-save.Rdata")

