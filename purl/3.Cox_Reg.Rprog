## ----setup, include=FALSE-------------------------------------------
knitr::opts_chunk$set(echo = TRUE, comment="#>")


## ---- data, echo=FALSE, message=FALSE, warning=FALSE----------------
if (!require('pacman')) install.packages('pacman', repos = "http://cran.us.r-project.org")
library(pacman)

pacman::p_load(
  readxl,       # load excel file
  glmnet,       # Lasso and Elastic-Net Regularized Generalized Linear Models
  rmdformats,   # rmd formats
  rmarkdown,    # rmarkdown
  here,         # File locator
  skimr,        # get overview of data
  tidyverse,    # data management + ggplot2 graphics 
  janitor,      # adding totals and percents to tables
  flextable,    # format the output table
  gtsummary,    # calculate summary statistics and format the results
  sjPlot,       # correlation matrix
  purrr,        # enhances R functional programming (FP) toolki 
  tidyr,        #Tools to help to create tidy data
  ggplot2,      #Plot the results
  glmnetUtils,  #Glmnet models for multiple alpha
  coefplot,     # Plotting Model Coefficients
  survival,     #survival model 
  tidymodels,   #for modeling and machine learning using tidyverse principles
  survivalROC   #survivalROC
  )


## ---- prepare-data, echo=TRUE, message=FALSE, warning=FALSE---------
#read the data that is stored under the data folder

scrambled<-readRDS(file = "./Data/scrambled.rds")

scrambled <- scrambled  %>% mutate(log10_B_HBA1C_PRC=log10(B_HBA1C_PRC),
                                   log10_DU_ACR=log10(DU_ACR))

dim(scrambled)

#select variables for unadjusted cox regression model
data <- scrambled  %>% select("KIM1.npx","SYND1.npx","IL.1RT1.npx",
 "WFDC2.npx", "CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx",
 "EDA2R.npx","TNFRSF4.npx", "GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", 
 "EFNA4.npx","TNF.R2.npx" ,"DLL1.npx", "TNFRSF6B.npx", "CD160.npx",
 "EPHA2.npx","RELT.npx","LTBR.npx","time","status") 

#drop any records with NA
data_drop_na <- data %>% drop_na()    

#Total sample size
nrow(data_drop_na)

#includes all proteins after excluding missing data
x <- data.matrix(data_drop_na[,c("KIM1.npx","SYND1.npx","IL.1RT1.npx","WFDC2.npx",
        "CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx","EDA2R.npx",
        "TNFRSF4.npx","GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", "EFNA4.npx",
        "TNF.R2.npx" ,"DLL1.npx" ,"TNFRSF6B.npx", "CD160.npx","EPHA2.npx",
        "RELT.npx","LTBR.npx")])
dim(x)
colnames(x)

#select follow-up time and status
tx <- data.matrix(data_drop_na[,c("time","status")])
ty    <- tx[, "time"]
tcens <- tx[,"status"] ## check this!!!!
y <- survival::Surv(ty, tcens)   
table(data_drop_na$status)


## ---- Unadjusted, echo=TRUE, message=FALSE, warning=FALSE-----------
#fit the unadjusted cox regression model
pfit <- glmnet(x, y, family = "cox", alpha=0)
class(pfit)


## ----surv-plot------------------------------------------------------
# survfit object for Cox model where lambda = 0.1
sf1 <- survival::survfit(pfit, s = 0.1, x = x, y = y)
plot(sf1)



## ---- coefficient-profile-plot1, echo=TRUE, message=FALSE, warning=FALSE----
plot(pfit, label = TRUE) 


## ---- coefficient-profile-plot12, echo=TRUE, message=FALSE, warning=FALSE----
coefpath(pfit) 


## ---- Unadjusted_cv_plot, echo=TRUE, message=FALSE, warning=FALSE----
#fit the cross-validated model
cvfit1 <- cv.glmnet(x, y, family = "cox", alpha=0)
plot(cvfit1, label = TRUE) 


## ---- Unadjusted_cv_min, echo=TRUE, message=FALSE, warning=FALSE----
cvfit1$lambda.min
coef(cvfit1, s = "lambda.min")


## ---- Unadjusted_cv_lse, echo=TRUE, message=FALSE, warning=FALSE----
cvfit1$lambda.1se
coef(cvfit1)


## ----glmnetUtils----------------------------------------------------

set.seed(46)
alphv <- seq(0, 1, len = 11)^3
cva_pfit1 <- cva.glmnet(x=x,y=y,family = "cox", alpha = alphv)
minlossplot(cva_pfit1)


## ----get_best_params------------------------------------------------
# Extract the best parameters from cva.glmnet object.
get_model_params <- function(fit) {
  alpha <- fit$alpha
  lambdaMin <- sapply(fit$modlist, `[[`, "lambda.min")
  lambdaSE <- sapply(fit$modlist, `[[`, "lambda.1se")
  error <- sapply(fit$modlist, function(mod) {min(mod$cvm)})
  best <- which.min(error)
  data.frame(alpha = alpha[best], lambdaMin = lambdaMin[best],
             lambdaSE = lambdaSE[best], eror = error[best])
}

get_model_params(cva_pfit1)	


## ----get_best_coef--------------------------------------------------
coef(cva_pfit1, s = get_model_params(cva_pfit1)$lambdaMin,
        alpha=get_model_params(cva_pfit1)$alpha)


## ----save-cva_pfit1-------------------------------------------------
save(cva_pfit1, file = "./save/21Cox-Reg1-save1.Rdata")


## ---- Adjusted, echo=TRUE, message=FALSE, warning=FALSE-------------

#select variables for adjusted model
data2 <- scrambled  %>% select("KIM1.npx","SYND1.npx","IL.1RT1.npx","WFDC2.npx",
         "CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx","EDA2R.npx",
         "TNFRSF4.npx", "GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", 
         "EFNA4.npx","TNF.R2.npx" , "DLL1.npx" ,"TNFRSF6B.npx", 
         "CD160.npx","EPHA2.npx","RELT.npx","LTBR.npx",
         "time","status","BL_eGFR","log10_B_HBA1C_PRC","log10_DU_ACR","SEX","AGE_TL") 
dim(data2)         

#drop any records with NA
data_drop_na2 <- data2 %>% drop_na()    

#Total sample size
nrow(data_drop_na2)

#includes all proteins after excluding missing data
x2 <- data.matrix(data_drop_na2[,c("KIM1.npx","SYND1.npx","IL.1RT1.npx",
        "WFDC2.npx", "CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx",
        "EDA2R.npx","TNFRSF4.npx", "GFR_alpha_1_npx","TNF.R1.npx","PI3_npx",
        "EFNA4.npx","TNF.R2.npx","DLL1.npx" ,"TNFRSF6B.npx", "CD160.npx",
        "EPHA2.npx","RELT.npx","LTBR.npx","log10_B_HBA1C_PRC",
        "log10_DU_ACR","SEX","AGE_TL")])

#select follow-up time and status
y2 <- data.matrix(data_drop_na2[,c("time","status")])


## ----glmnet-pfit2, echo=TRUE, message=FALSE, warning=FALSE----------
#fit the adjusted cox regression model
pfit2 <- glmnet(x2, y2, family = "cox", alpha=0)



## ---- Adjusted_plot, echo=TRUE, message=FALSE, warning=FALSE--------
plot(pfit2, label = TRUE) 


## ---- Adjusted_cv_plot, echo=TRUE, message=FALSE, warning=FALSE-----
#fit the cross-validatedmodel
cvfit2 <- cv.glmnet(x2, y2, family = "cox", alpha=0)

plot(cvfit2, label = TRUE) 


## ---- Adjusted_cv_min, echo=TRUE, message=FALSE, warning=FALSE------
#get the minimal lambda value (value of lambda that gives minimum cvm)
(l_min <- cvfit2$lambda.min)

# Express on natural log scale
log(l_min)
# Cross-validated Cox Regression Model using the minimal lambda
coef(cvfit2, s = "lambda.min")


## ---- Adjusted_cv_lse, echo=TRUE, message=FALSE, warning=FALSE------
(l_1se <- cvfit2$lambda.1se)

# Express on natural log scale
log(l_1se)

coef(cvfit2)


## ----glmnetUtils_M2-------------------------------------------------

set.seed(46)
alphv <- seq(0, 1, len = 11)^3
cva_pfit2 <- cva.glmnet(x=x2,y=y2,family = "cox", alpha = alphv)
minlossplot(cva_pfit2)


## ----get_best_params_M2---------------------------------------------
# Extract the best parameters from cva.glmnet object.
get_model_params <- function(fit) {
  alpha <- fit$alpha
  lambdaMin <- sapply(fit$modlist, `[[`, "lambda.min")
  lambdaSE <- sapply(fit$modlist, `[[`, "lambda.1se")
  error <- sapply(fit$modlist, function(mod) {min(mod$cvm)})
  best <- which.min(error)
  data.frame(alpha = alpha[best], lambdaMin = lambdaMin[best],
             lambdaSE = lambdaSE[best], eror = error[best])
}

(pfit2_params <- get_model_params(cva_pfit2))	


## ----get_best_coef_M2-----------------------------------------------
coef(cva_pfit2, s = get_model_params(cva_pfit2)$lambdaMin,
        alpha=get_model_params(cva_pfit2)$alpha)


## ----pfit2----------------------------------------------------------
a <- pfit2_params[["alpha"]]
lmbda_min <- pfit2_params[["lambdaMin"]]
(pfit2_a <- glmnet(x2, y2, family = "cox", alpha=a))


## ----surv-roc-------------------------------------------------------
                
## Obtain the linear predictor
 data_drop_na2$lp <- predict(pfit2_a, newx = x2, type = "link", s = lmbda_min)
 

# data_drop_na2

## Define a helper function to evaluate at various t
survivalROC_helper <- function(t) {
    survivalROC(Stime        = data_drop_na2$time,
                status       = data_drop_na2$status,
                marker       = data_drop_na2$lp,
                predict.time = t,
                method       = "NNE",
                span = 0.25 * nrow(data_drop_na2)^(-0.20))
}

## Evaluate every 3 years
survivalROC_data <- tibble(t = 3* c(1,2,3,4,5,6)) %>%
    mutate(survivalROC = map(t, survivalROC_helper),
           ## Extract scalar AUC
           auc = map_dbl(survivalROC, magrittr::extract2, "AUC"),
           ## Put cut off dependent values in a data_frame
           df_survivalROC = map(survivalROC, function(obj) {
               as_tibble(obj[c("cut.values","TP","FP")])
           })) %>%
           select(-survivalROC) %>%
    unnest(df_survivalROC) %>%
    arrange(t, FP, TP)
    
# survivalROC_data %>% print (n=100)


## ----surv-roc-plot--------------------------------------------------
## Plot Time-dependent ROC every 3 years
survivalROC_data %>%
    ggplot(mapping = aes(x = FP, y = TP)) +
    geom_point() +
    geom_line() +
    geom_label(data = survivalROC_data %>% select(t,auc) %>% unique,
               mapping = aes(label = sprintf("%.3f", auc)), x = 0.5, y = 0.5) +
    facet_wrap( ~ t) +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
          legend.key = element_blank(),
          plot.title = element_text(hjust = 0.5),
          strip.background = element_blank())



## ----save-cva_pfit1_M2----------------------------------------------
save(cva_pfit2, file = "./save/21Cox-Reg1-save2.Rdata")

