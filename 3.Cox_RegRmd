---
title: 'Lasso and Elastic-Net Regularized Generalized Linear Models'
subtitle: 'Cox Model'
author: "Chunyi Wu and Andrzej Galecki"
date: "`r as.character(Sys.Date(), format = '%A %B %d, %Y')`"
output:
  rmdformats::readthedown: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r, data, echo=FALSE, message=FALSE, warning=FALSE}
if (!require('pacman')) install.packages('pacman', repos = "http://cran.us.r-project.org")
library(pacman)

pacman::p_load(
  readxl,       # load excel file
  glmnet,       # Lasso and Elastic-Net Regularized Generalized Linear Models
  rmdformats,   # rmd formats
  rmarkdown,    # rmarkdown
  here,         # File locator
  skimr,        # get overview of data
  tidyverse,    # data management + ggplot2 graphics 
  janitor,      # adding totals and percents to tables
  flextable,    # format the output table
  gtsummary,    # calculate summary statistics and format the results
  sjPlot,       # correlation matrix
  purrr,        # enhances R’s functional programming (FP) toolki 
  tidyr,        #Tools to help to create tidy data
  ggplot2       #Plot the results
  )
```

## Unadjusted Cox Regression Model

```{r, Unstardized, echo=TRUE, message=FALSE, warning=FALSE}
#read the data that is stored under the data folder
scrambled<-readRDS(file = "./Data/scrambled.rds")

#set seed to ensure reproducible results
set.seed(46)

#select variables for unadjusted model
data <- scrambled  %>% select("KIM1.npx","SYND1.npx","IL.1RT1.npx","WFDC2.npx","CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx","EDA2R.npx","TNFRSF4.npx","GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", "EFNA4.npx","TNF.R2.npx" ,"DLL1.npx" ,"TNFRSF6B.npx", "CD160.npx","EPHA2.npx","RELT.npx","LTBR.npx","time","status") 

#drop any records with NA
data_drop_na <- data %>% drop_na()    

#Total sample size
nrow(data_drop_na)

#includes all proteins after excluding missing data
x <- data.matrix(data_drop_na[,c("KIM1.npx","SYND1.npx","IL.1RT1.npx","WFDC2.npx","CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx","EDA2R.npx","TNFRSF4.npx","GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", "EFNA4.npx","TNF.R2.npx" ,"DLL1.npx" ,"TNFRSF6B.npx", "CD160.npx","EPHA2.npx","RELT.npx","LTBR.npx")])

#select follow-up time and status
y <- data.matrix(data_drop_na[,c("time","status")])

#fit the unadjusted cox model
pfit <- glmnet(x, y, family = "cox")

```

##    - coefficient plot
####  Unadjusted Cox Regression Model Coefficient Plot
```{r, Unstardized_plot, echo=TRUE, message=FALSE, warning=FALSE}
plot(pfit, label = TRUE) 
```
"Each curve corresponds to a variable. It shows the path of its coefficient against the ℓ1-norm of the whole coefficient vector as λ varies. The axis above indicates the number of nonzero coefficients at the current λ, which is the effective degrees of freedom (df) for the lasso."

source: ("https://glmnet.stanford.edu/articles/glmnet.html")

##    - cross-validated cox model
####  Unadjusted Cross-Validated Cox Regression Model Coefficient Plot
```{r, Unstardized_cv_plot, echo=TRUE, message=FALSE, warning=FALSE}
#fit the cross-validatedmodel
cvfit <- cv.glmnet(x, y, family = "cox")

plot(pfit, label = TRUE) 
```

"This plots the cross-validation curve (red dotted line) along with upper and lower standard deviation curves along the λ sequence (error bars). Two special values along the λ sequence are indicated by the vertical dotted lines. lambda.min is the value of λ that gives minimum mean cross-validated error, while lambda.1se is the value of λ that gives the most regularized model such that the cross-validated error is within one standard error of the minimum."

source: ("https://glmnet.stanford.edu/articles/glmnet.html")

##   - minimal lambda value
####  Unadjusted Cross-Validated Cox Regression Coefficients using the minimal lambda value 
```{r, Unstardized_cv_min, echo=TRUE, message=FALSE, warning=FALSE}
#get the minimal lambda value (value of lambda that gives minimum cvm)
cvfit$lambda.min
# Cross-validated Cox Model using the minimal lambda
coef(cvfit, s = "lambda.min")
```

##   - lambda.lse
####  Unadjusted Cross-Validated Cox Regression Coefficients using lambda.lse
```{r, Unstardized_cv_lse, echo=TRUE, message=FALSE, warning=FALSE}
#largest value of lambda such that error is within 1 standard error of the minimum.
cvfit$lambda.lse
# Cross-validated Cox Model using the lambda.lse
coef(cvfit)
```

## Adjusted Cox Regression Model 
### Adjusted Cox Regression Model (adjusting for Baseline HbA1c, ACR, eGFR)
```{r, Adjusted, echo=TRUE, message=FALSE, warning=FALSE}

#select variables for adjusted model
data2 <- scrambled  %>% select("KIM1.npx","SYND1.npx","IL.1RT1.npx","WFDC2.npx","CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx","EDA2R.npx","TNFRSF4.npx","GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", "EFNA4.npx","TNF.R2.npx" ,"DLL1.npx" ,"TNFRSF6B.npx", "CD160.npx","EPHA2.npx","RELT.npx","LTBR.npx","time","status","BL_eGFR","log10_B_HBA1C_PRC","log10_DU_ACR") 

#drop any records with NA
data_drop_na2 <- data2 %>% drop_na()    

#Total sample size
nrow(data_drop_na2)

#includes all proteins after excluding missing data
x2 <- data.matrix(data_drop_na2[,c("KIM1.npx","SYND1.npx","IL.1RT1.npx","WFDC2.npx","CD27.npx", "TNFRSF10A.npx","LAYN.npx","PVRL4.npx","EDA2R.npx","TNFRSF4.npx","GFR_alpha_1_npx","TNF.R1.npx","PI3_npx", "EFNA4.npx","TNF.R2.npx" ,"DLL1.npx" ,"TNFRSF6B.npx", "CD160.npx","EPHA2.npx","RELT.npx","LTBR.npx","BL_eGFR","log10_B_HBA1C_PRC","log10_DU_ACR")])

#select follow-up time and status
y2 <- data.matrix(data_drop_na2[,c("time","status")])

#fit the unadjusted cox model
pfit2 <- glmnet(x2, y2, family = "cox")

```

##   - coefficient plot
####  Adjusted Cox Regression Model Coefficient Plot
```{r, Adjusted_plot, echo=TRUE, message=FALSE, warning=FALSE}
plot(pfit2, label = TRUE) 
```

##   - cross-validated cox model
####  Adjusted Cross-Validated Cox Regression Model Coefficient Plot
```{r, Adjusted_cv_plot, echo=TRUE, message=FALSE, warning=FALSE}
#fit the cross-validatedmodel
cvfit2 <- cv.glmnet(x2, y2, family = "cox")

plot(pfit2, label = TRUE) 
```

##   - minimal lambda value
####  Adjusted Cross-Validated Cox Regression Coefficients using minimal lambda value
```{r, Adjusted_cv_min, echo=TRUE, message=FALSE, warning=FALSE}
#get the minimal lambda value (value of lambda that gives minimum cvm)
cvfit2$lambda.min
# Cross-validated Cox Model using the minimal lambda
coef(cvfit2, s = "lambda.min")
```

##   - lambda.lse
####  Adjusted Cross-Validated Cox Regression Coefficients using lambda.lse
```{r, Adjusted_cv_lse, echo=TRUE, message=FALSE, warning=FALSE}
#largest value of lambda such that error is within 1 standard error of the minimum.
cvfit2$lambda.lse
# Cross-validated Cox Model using the lambda.lse
coef(cvfit2)
```