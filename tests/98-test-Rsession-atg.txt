> 
> rm(list = ls())
> f1 <- "./tests/T1.Rdata_cy"
> load(file =f1)
> ls()
[1] "f1"  "T.1"
> names(T.1)
[1] "cvfit" "xnew"  "ySurv"
> 
> BICAICglm<- function(fit){
+  #-- Based on https://stackoverflow.com/questions/40920051/r-getting-aic-bic-likelihood-from-glmnet
+    tmp <- list(fit =fit)
+    assign("T.4", tmp, envir =.GlobalEnv)
+ 
+    #tLL <- fit$null.deviance - deviance(fit)  
+    #tLL <- fit$null.deviance - deviance(fit)  
+    tLL <- -deviance(fit) # 2*log-likelihood
+    ## k <- dim(model.matrix(fit))[2]
+    k <- fit$df 
+    n <- nobs(fit)
+    AICc <- -tLL+2*k+2*k*(k+1)/(n-k-1)
+    AIC_ <- -tLL+2*k
+    BIC  <-log(n)*k - tLL
+    res=cbind(AIC_, BIC, AICc)
+    colnames(res)=c("AIC", "BIC", "AICc")
+    return(res)
+  }
>  
> mytidy_Surv <- function(cvfit, xnew, ySurv){
+   # cv.glmnet fitfamily = cox
+    tmp <- list(cvfit= cvfit, xnew=xnew, ySurv= ySurv)
+    assign("T.1", tmp, envir = .GlobalEnv)
+    mygl <- myglance(cvfit)
+    nlmbda <- mygl %>% select(n_lambda) %>% pull()
+    idx_min <- mygl[, "index_min"] %>% pull()
+    idx_1se <- mygl[, "index_1se"] %>% pull()
+    cvtd <- mytidy(cvfit) 
+    # print(cvtd)
+    mincv <- rep("-", nlmbda)
+    mincv[idx_1se:idx_min] <- "+"
+    mincv[idx_min] <- "min>"
+    mincv[idx_1se] <- "<1se"
+    tmp <- list(mygl= mygl, cvtd = cvtd, idx = c(idx_1se, idx_min), mincv=mincv)
+    assign("T.2", tmp, envir = .GlobalEnv)
+ 
+    # print(length(mincv))
+    cvtd$mincv <- mincv
+  
+    fit <- cvfit$glmnet.fit
+  
+    td_fit <- mytidy(fit) %>% select(-c(step, lambda)) # with nested beta
+    pred     <- predict(fit, newx = xnew)
+    tmp <- list(pred = pred, fit = fit)
+    assign("T.3", tmp, envir = .GlobalEnv)
+ 
+    C_index  <-  Cindex(pred, ySurv)
+  
+    info     <- BICAICglm(fit)
+    info_tbl <- as_tibble(info)
+    td_fit$Cindex <- C_index
+    bind_cols(cvtd, td_fit, info_tbl)
+ }
> 
>  if (!require('pacman')) install.packages('pacman', repos = "http://cran.us.r-project.org")
>  library(pacman)
>  
>  pacman::p_load(
+    readxl,       # load excel file
+    glmnet,       # Lasso and Elastic-Net Regularized Generalized Linear Models
+    rmdformats,   # rmd formats
+    rmarkdown,    # rmarkdown
+    here,         # File locator
+    skimr,        # get overview of data
+    tidyverse,    # data management + ggplot2 graphics 
+    tidymodels,   #for modeling and machine learning using tidyverse principles
+    janitor,      # adding totals and percents to tables
+    flextable,    # format the output table
+    gtsummary,    # calculate summary statistics and format the results
+    sjPlot,       # correlation matrix
+    purrr,        # enhances R functional programming (FP) toolki 
+    tidyr,        #Tools to help to create tidy data
+    ggplot2,      #Plot the results
+    glmnetUtils,  #Glmnet models for multiple alpha
+    coefplot,     # Plotting Model Coefficients
+    survival,     #survival model 
+    survivalROC,  #survivalROC
+    writexl       #write excel
+    )
> 
> library(utilsag)
> # session Info
> 
> sessionInfo()
R version 4.3.1 (2023-06-16 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19044)

Matrix products: default


locale:
[1] LC_COLLATE=English_United States.utf8 
[2] LC_CTYPE=English_United States.utf8   
[3] LC_MONETARY=English_United States.utf8
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.utf8    

time zone: America/New_York
tzcode source: internal

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] utilsag_0.2.1       writexl_1.4.2       survivalROC_1.0.3.1
 [4] survival_3.5-5      coefplot_1.2.8      glmnetUtils_1.1.8  
 [7] sjPlot_2.8.14       gtsummary_1.7.1     flextable_0.9.2    
[10] janitor_2.2.0       yardstick_1.2.0     workflowsets_1.0.1 
[13] workflows_1.1.3     tune_1.1.1          rsample_1.1.1      
[16] recipes_1.0.6       parsnip_1.1.0       modeldata_1.1.0    
[19] infer_1.0.4         dials_1.2.0         scales_1.2.1       
[22] broom_1.0.5         tidymodels_1.1.0    lubridate_1.9.2    
[25] forcats_1.0.0       stringr_1.5.0       dplyr_1.1.2        
[28] purrr_1.0.1         readr_2.1.4         tidyr_1.3.0        
[31] tibble_3.2.1        ggplot2_3.4.2       tidyverse_2.0.0    
[34] skimr_2.1.5         here_1.0.1          rmarkdown_2.22     
[37] rmdformats_1.0.4    glmnet_4.1-7        Matrix_1.5-4.1     
[40] readxl_1.4.2        pacman_0.5.1       

loaded via a namespace (and not attached):
  [1] splines_4.3.1           later_1.3.1             cellranger_1.1.0       
  [4] hardhat_1.3.0           rpart_4.1.19            lifecycle_1.0.3        
  [7] rprojroot_2.0.3         globals_0.16.2          lattice_0.21-8         
 [10] MASS_7.3-60             insight_0.19.2          backports_1.4.1        
 [13] magrittr_2.0.3          useful_1.2.6            httpuv_1.6.11          
 [16] zip_2.3.0               askpass_1.1             minqa_1.2.5            
 [19] multcomp_1.4-25         penAFT_0.3.0            nnet_7.3-19            
 [22] TH.data_1.1-2           sandwich_3.0-2          ipred_0.9-14           
 [25] gdtools_0.3.3           lava_1.7.2.1            irlba_2.3.5.1          
 [28] listenv_0.9.0           crul_1.4.0              performance_0.10.4     
 [31] parallelly_1.36.0       codetools_0.2-19        xml2_1.3.4             
 [34] tidyselect_1.2.0        shape_1.4.6             ggeffects_1.2.3        
 [37] httpcode_0.3.0          lme4_1.1-33             base64enc_0.1-3        
 [40] broom.helpers_1.13.0    jsonlite_1.8.5          ellipsis_0.3.2         
 [43] iterators_1.0.14        emmeans_1.8.7           systemfonts_1.0.4      
 [46] foreach_1.5.2           tools_4.3.1             ragg_1.2.5             
 [49] Rcpp_1.0.10             glue_1.6.2              prodlim_2023.03.31     
 [52] xfun_0.39               withr_2.5.0             fastmap_1.1.1          
 [55] boot_1.3-28.1           fansi_1.0.4             openssl_2.0.6          
 [58] digest_0.6.31           timechange_0.2.0        R6_2.5.1               
 [61] mime_0.12               estimability_1.4.1      textshaping_0.3.6      
 [64] colorspace_2.1-0        utf8_1.2.3              generics_0.1.3         
 [67] fontLiberation_0.1.0    data.table_1.14.8       class_7.3-22           
 [70] pkgconfig_2.0.3         gtable_0.3.3            timeDate_4022.108      
 [73] GPfit_1.0-8             furrr_0.3.1             htmltools_0.5.5        
 [76] fontBitstreamVera_0.1.1 bookdown_0.34           gower_1.0.1            
 [79] snakecase_0.11.0        knitr_1.43              rstudioapi_0.14        
 [82] tzdb_0.4.0              reshape2_1.4.4          uuid_1.1-0             
 [85] coda_0.19-4             nlme_3.1-162            curl_5.0.1             
 [88] nloptr_2.0.3            repr_1.1.6              zoo_1.8-12             
 [91] sjlabelled_1.2.0        parallel_4.3.1          pillar_1.9.0           
 [94] grid_4.3.1              vctrs_0.6.3             promises_1.2.0.1       
 [97] xtable_1.8-4            lhs_1.1.6               evaluate_0.21          
[100] mvtnorm_1.2-2           cli_3.6.1               compiler_4.3.1         
[103] rlang_1.1.1             crayon_1.5.2            future.apply_1.11.0    
[106] modelr_0.1.11           plyr_1.8.8              sjmisc_2.8.9           
[109] stringi_1.7.12          munsell_0.5.0           censored_0.2.0         
[112] bayestestR_0.13.1       fontquiver_0.2.1        sjstats_0.18.2         
[115] hms_1.1.3               future_1.32.0           gfonts_0.2.0           
[118] shiny_1.7.4             gt_0.9.0                officer_0.6.2          
[121] DiceDesign_1.9         
> 
> # unpack T.1 
> 
> names(T.1)
[1] "cvfit" "xnew"  "ySurv"
> cvfit1 <- T.1[["cvfit"]]
> x  <- T.1[["xnew"]]
> ySurv <- T.1[["ySurv"]]
> td_cvfit1 <- mytidy_Surv(cvfit1, x, ySurv)
> td_cvfit1
# A tibble: 63 × 15
    step lambda estimate std.error conf.low conf.high nzero mincv dev.ratio
   <int>  <dbl>    <dbl>     <dbl>    <dbl>     <dbl> <int> <chr>     <dbl>
 1     1 0.143      9.88     0.401     9.48      10.3     3 <1se      0.185
 2     2 0.130      9.84     0.390     9.45      10.2     4 +         0.193
 3     3 0.119      9.78     0.391     9.39      10.2     4 +         0.200
 4     4 0.108      9.73     0.401     9.32      10.1     4 +         0.205
 5     5 0.0986     9.69     0.413     9.28      10.1     5 +         0.210
 6     6 0.0899     9.67     0.426     9.24      10.1     6 +         0.215
 7     7 0.0819     9.66     0.440     9.22      10.1     6 +         0.221
 8     8 0.0746     9.65     0.454     9.20      10.1     7 +         0.226
 9     9 0.0680     9.64     0.465     9.18      10.1     8 +         0.231
10    10 0.0619     9.63     0.477     9.16      10.1     8 +         0.235
# ℹ 53 more rows
# ℹ 6 more variables: df <int>, beta <list>, Cindex <dbl>, AIC <dbl>,
#   BIC <dbl>, AICc <dbl>
# ℹ Use `print(n = ...)` to see more rows
> ls()
 [1] "BICAICglm"   "cvfit1"      "f1"          "mytidy_Surv" "T.1"        
 [6] "T.2"         "T.3"         "T.4"         "td_cvfit1"   "x"          
[11] "ySurv"      
> 
